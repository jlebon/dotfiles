[color]
	ui = true
	# We use always here instead of auto because otherwise
	# we don't get any coloring with Ggrep in vim.
	grep = always
[color "grep"]
	linenumber = green
	match = red bold
	filename = magenta
[merge]
	conflictstyle=diff3
[user]
	name = Jonathan Lebon
	email = jonathan@jlebon.com
	signingkey = 519CE313
[alias]
	lsb = "!f() { : git branch ; git bstatus \"$@\"; }; f"
	format-one-patch = "!f() { : git format-patch ; git format-patch ${1}^..${1} \"$@\"; }; f"
	d = diff
	cam = commit -am
	wip = commit -am "wip"
	scrap = reset --hard HEAD
	uncommit = reset HEAD^
	rob = reset HEAD^
	nuke = reset --hard HEAD^
	origin = reset --hard origin/master
	upstream = reset --hard upstream/master
	last = log -1 HEAD
	ck = checkout
	wt = worktree
	wtl = worktree list
	amend = commit --amend
	amendpipe = -c core.commentchar=| commit --amend
	amendit = commit --amend --no-edit
	fix = commit --amend --no-edit -a
	fixup = "!f() { : git commit ; git commit -a --fixup ${1:-HEAD}; }; f"
	# super hacky way to find the "default" upstream branch, which may not be master
	cm = "!f() { git checkout $(basename $(cut -f2 -d' ' .git/refs/remotes/upstream/HEAD 2>/dev/null || cut -f2 -d' ' .git/refs/remotes/origin/HEAD 2>/dev/null || echo master)); }; f"
	rlog = ! sh -c 'git log --reverse --ancestry-path $1^..HEAD' - 2>/dev/null
	rei = rebase -i
	rec = "!f() { git up && git rebase --continue; }; f"
	rea = rebase --abort
	rem = rebase master
	cp = cherry-pick
	cpc = cherry-pick --continue
	cpa = cherry-pick --abort
	cps = cherry-pick --skip
	l = log --pretty=oneline
	la = log --pretty=format:'%C(yellow)%h %Cred%ad %Cblue%an%Cgreen%d %Creset%s' --date=short
	lg = log --graph --pretty=format:'%C(yellow)%h %Cred%ad %Cblue%an%Cgreen%d %Creset%s' --date=short
	h = log --graph --pretty=format:'%C(yellow)%h %Cred%ad %Cblue%an%Cgreen%d %Creset%s' --date=short -n 10
	hh = log --graph --pretty=format:'%C(yellow)%h %Cred%ad %Cblue%an%Cgreen%d %Creset%s' --date=short -n 20
	up = add -u

	# same as git stash show, except you can just give the stash index number
	# defaults to git stash list if no index number given
	# also shows untracked stashed files (if any), which are kept in the third parent of the commit
	stashow = "!f() { set -e; if [ $# -eq 0 ]; then git stash list; else ( git show --color=always stash@{$1}; if git rev-parse --verify --quiet stash@{$1}^3; then git show --color=always stash@{$1}^3; fi; ) | LESS=FRX less -r; fi; }; f"

	pr = "!f() { set -e; pr=$1; shift; git push origin HEAD:refs/heads/pr/$pr \"$@\"; }; f"
	prb = "!f() { set -e; pr=$(git rev-parse --abbrev-ref HEAD); git pr $pr \"$@\"; }; f"
	prd = "!f() { : git branch ; set -e; while [ $# -ne 0 ]; do b=$1; shift; git branch -D $b || :; git push origin :pr/$b || :; done;}; f"

	restamp = "! git commit --amend --no-edit --date=\"$(date -R)\""

	odiff = diff origin/master
	udiff = diff upstream/master
	subu = submodule update --init
	autosquash = -c core.editor=true rebase -i --autosquash
	# from https://github.com/cgwalters/homegit/blob/master/dotfiles/gitconfig
	rclean = !git clean -dfX && git submodule foreach git clean -dfX
	rxclean = !git clean -dfx && git submodule foreach git clean -dfx
	willadd = add -N
[pull]
	rebase = true
[push]
	default = simple
[diff]
	algorithm = histogram
	renames = copies
	indentHeuristic = true
	compactionHeuristic = true
	renameLimit = 791
	tool = difftastic
#	colorMoved = zebra
#	colorMovedWS = allow-indentation-change
[difftool]
	prompt = false
[difftool "difftastic"]
	cmd = difft "$LOCAL" "$REMOTE"
# Use a pager for large output, just like other git commands.
[pager]
	difftool = true
# `git dft` is less to type than `git difftool`.
[alias]
	dft = difftool
[include]
	path = .gitconfig.local
[commit]
	verbose = true
#[interactive]
#	diffFilter = diff-highlight
[pager]
	#log  = delta --file-style box --syntax-theme GitHub
	#show = delta --file-style box --syntax-theme GitHub
	#diff = delta --file-style box --syntax-theme GitHub
	#log  = diff-highlight | less
	#show = diff-highlight | less
	#diff = diff-highlight | less
	# XXX: panics on SIGPIPE when exiting
	#log  = diff-highlight-rs | less
	#show = diff-highlight-rs | less
	#diff = diff-highlight-rs | less
	# cool, but using --pattern override -X, which means it always clears the
	# screen even if it's a small diff
#	show = diff-highlight | less --tabs=4 -RFX --pattern '^(commit|diff --git)'
#	diff = diff-highlight | less --tabs=4 -RFX --pattern '^(commit|diff --git)'
#[color "diff-highlight"]
#	oldNormal    = "black #f8cbcb"
#	oldHighlight = "black #ff8888"
#	newNormal    = "black #cbeecb"
#	newHighlight = "black #aaffaa"
#[color "diff"]
#	oldMoved            = "black #f8cbcb"
#	newMoved            = "black #cbeecb"
#	oldMovedAlternative = "black #ff8888"
#	newMovedAlternative = "black #aaffaa"
#[color "diff"]
#	old    = "black #f8cbcb"
#	new    = "black #cbeecb"
[color "diff-highlight"]
	oldNormal    = "red"
	oldHighlight = "black #fbaaaa"
	newNormal    = "green"
	newHighlight = "black #b3eeab"
[rebase]
	autostash = true
[grep]
	lineNumber = true
[init]
	templateDir = ~/.git_templates
	defaultBranch = main

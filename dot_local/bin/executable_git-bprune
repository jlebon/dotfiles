#!/usr/bin/python3

import argparse
import getpass
import os
import subprocess
import sys

LOGSET_FORMAT_ARG = '--format=%at %an %ae %s'

# XXX: do actual commit diff checking?
# XXX: use `git default`


def main():
    # initialization stuff
    args = parse_args()
    ensure_git_toplevel()
    upstream, origin = get_remotes()
    main_branch = get_default_branch_for_remote(upstream)
    logset = build_logset(main_branch, upstream, args.extend)

    # local branches
    if args.local or not args.remote:
        if args.force:
            git_worktree_prune()
        local_branches = get_local_branches(main_branch)
        local_branches = get_merged_branches(logset, local_branches)
        delete_local_branches(local_branches, args.force, args.name_only)

    # remote branches
    if origin and (args.remote or not args.local):
        if args.force:
            git_fetch_prune(origin)
        remote_branches = get_remote_branches(origin)
        remote_branches = get_merged_branches(logset, remote_branches)
        delete_remote_branches(origin, remote_branches, args.force,
                               args.name_only)


def parse_args():
    parser = argparse.ArgumentParser(prog="git bprune")
    parser.add_argument('-l', '--local', action='store_true',
                        help="Scan local branches only")
    parser.add_argument('-r', '--remote', action='store_true',
                        help="Scan remote branches only")
    parser.add_argument('-n', '--name-only', action='store_true',
                        help="Print branch names only in dry-run mode")
    parser.add_argument('-f', '--force', action='store_true',
                        help="Delete branches")
    parser.add_argument('-e', '--extend', metavar='BRANCH_PATTERN',
                        default=[], action='append',
                        help="Also consider commits in these branches merged")
    return parser.parse_args()


def ensure_git_toplevel():
    try:
        dir = subprocess.check_output(['git', 'rev-parse', '--show-toplevel'],
                                      stderr=subprocess.PIPE, encoding='utf-8')
    except Exception:
        fatal("not inside a git repository")
    os.chdir(dir.strip())


def get_remotes():
    remotes = subprocess.check_output(['git', 'remote'], encoding='utf-8')

    # convert to a set
    remotes = set(remotes.splitlines())

    # get the trivial cases out of the way
    if len(remotes) == 0:
        fatal("no remotes found")
    if len(remotes) == 1:
        return (remotes.pop(), '')

    # ignore upstream-PUSH remotes
    remotes -= set(['upstream-PUSH'])

    if remotes == set(['upstream', 'origin']):
        return ('origin', 'origin')

    user = getpass.getuser()
    if remotes == set(['origin', user]):
        return ('upstream', user)

    fatal("cannot determine upstream and fork remotes")


def get_default_branch_for_remote(remote):
    if not branch_is_symref(f'{remote}/HEAD'):
        subprocess.check_output(['git', 'fetch', remote])
        subprocess.check_output(['git', 'remote', 'set-head', remote, '-a'])
    ref = subprocess.check_output(['git', 'symbolic-ref',
                                   f'refs/remotes/{remote}/HEAD'],
                                  encoding='utf-8').strip()
    assert ref.startswith('refs/remotes/')
    return ref.removeprefix('refs/remotes/')


def build_logset(branch, remote, extra_patterns):
    logset = set()
    update_logset_for_refs(logset, [branch])
    resolved_extra_branches = set()
    try:
        cfg = subprocess.check_output(['git', 'config', '--get-all',
                                       'bprune.extend'],
                                      encoding='utf-8')
        extra_patterns.extend(cfg.splitlines())
    except subprocess.CalledProcessError:
        pass
    # support whitespace-separated patterns
    extra_patterns = sum([p.split() for p in extra_patterns], [])
    for p in extra_patterns:
        resolved_extra_branches.update(get_remote_branches(remote, p))
    if len(resolved_extra_branches) > 0:
        resolved_extra_branches.add(f'^{branch}')
        update_logset_for_refs(logset, resolved_extra_branches)
    return logset


def update_logset_for_refs(logset, branches):
    proc = subprocess.Popen(['git', 'log', LOGSET_FORMAT_ARG, *branches, '--'],
                            encoding='utf-8', stdout=subprocess.PIPE)
    for line in proc.stdout:
        logset.add(line.strip())
    assert proc.wait() == 0


def get_local_branches(main_branch):
    FORMAT = '%(refname:lstrip=2) %(upstream:lstrip=2)'
    lines = subprocess.check_output(['git', 'branch', '--sort=committerdate',
                                     f'--format={FORMAT}'], encoding='utf-8')
    lines = lines.splitlines()
    worktree_branches = get_worktree_branches()
    final_branches = []
    for line in lines:
        if 'HEAD detached from' in line:
            continue

        branches = line.split()

        # skip over the main branch
        if len(branches) == 2 and branches[1] == main_branch:
            continue

        # skip over checked out branches
        if branches[0] in worktree_branches:
            continue

        final_branches.append(branches[0])

    return final_branches


def get_worktree_branches():
    lines = subprocess.check_output(['git', 'worktree', 'list', '--porcelain'],
                                    encoding='utf-8').splitlines()
    branches = set()
    for line in lines:
        if line.startswith("branch"):
            _, ref = line.split()
            assert ref.startswith("refs/heads/")
            branches.add(ref.removeprefix("refs/heads/"))
    return branches


def get_remote_branches(remote, pattern='*'):
    default = get_default_branch_for_remote(remote)
    lines = subprocess.check_output(['git', 'branch', '-rl',
                                     '--sort=committerdate',
                                     f'{remote}/{pattern}',
                                     '--format=%(refname:lstrip=2)'],
                                    encoding='utf-8').splitlines()
    return [b for b in lines if b != default and not branch_is_symref(b)]


def branch_is_symref(branch):
    try:
        subprocess.check_output(['git', 'symbolic-ref', '-q',
                                 f'refs/remotes/{branch}'])
        return True
    except subprocess.CalledProcessError as e:
        if e.returncode == 1:
            return False
        raise e


def git_worktree_prune():
    subprocess.check_call(['git', 'worktree', 'prune'])


def delete_local_branches(branches, force, name_only):
    if len(branches) > 0:
        args = ['git', 'branch', '-D', *branches]
        if force:
            subprocess.check_call(args)
        else:
            print_branches(branches, name_only)


def delete_remote_branches(remote, branches, force, name_only):
    if len(branches) > 0:
        args = ['git', 'push', 'origin']
        for branch in branches:
            assert branch.startswith(f'{remote}/')
            push_arg = branch.removeprefix(f'{remote}/')
            args.append(f':{push_arg}')
        if force:
            subprocess.check_call(args)
        else:
            print_branches(branches, name_only)


def print_branches(branches, name_only):
    if name_only:
        for branch in branches:
            print(branch)
    else:
        max_len = 0
        for branch in branches:
            max_len = max(len(branch), max_len)
        for branch in branches:
            log = subprocess.check_output(['git', 'log', '-1', '--format=%s (%ar)',
                                           branch, '--'], encoding='utf-8')
            log = log.strip()
            branch += " " * (max_len - len(branch))
            print(branch, log)


def git_fetch_prune(remote):
    subprocess.check_call(['git', 'fetch', '--prune', remote])


def get_merged_branches(logset, branches):
    merged_branches = []
    for branch in branches:
        log = subprocess.check_output(['git', 'log', '-1', LOGSET_FORMAT_ARG,
                                       branch, '--'], encoding='utf-8')
        log = log.strip()
        if log in logset:
            merged_branches.append(branch)
    return merged_branches


def fatal(*args):
    print("fatal:", *args, file=sys.stderr)
    sys.stderr.flush()
    sys.exit(1)


if __name__ == "__main__":
    main()
